function LinkedList(){
  let Node = function(element){
    this.element = element;
    this.next = null;
  }

  let length = 0;
  let head = null;

  this.append = function(element){
    let node = new Node(element);
    let current = null;

    if(head === null){
      head = node;
    }else{
      current = head;
      while(current.next){
        current = current.next;
      }
      current.next = node;
    }
    length++;
  };

  this.removeAt = function(position){
    if(position >-1 && position < length){
      let previous = null;
      let current = head;
      let index = 0;

      if(position === 0){
        head = current.next;
      }else{
        while(index++ < position){
          previous = current;
          current = current.next;
        }
        previous.next = current.next;
      }
      length--;
      return current.element;
    }else{
      return null;
    }
  };

  this.insert = function(position, element){
    if(position > -1 && position <= length){
      let previous = null;
      let current = head;
      let index = 0;
      let node = new Node(element);

      if(position === 0){
        head = node;
        node.next = current;
      }else{
        while (index++ < position){
          previous = current;
          current = current.next;
        }
        previous.next = node;
        node.next = current;
      }
      length++;
      return true;
    } else{
    return false;
  }
};
this.toString = function(){
  let current = head;
  let string = '';

  while(current){
    string += current.element + (current.next ? 'n':'');
    current = current.next;
  }
  return string;
};

this.indexOf = function(element){

  let current = head;
  let index = 0;

  while(current){
    if(current.element != element){
      current = current.next;
      index++;
    }else{
      return index;
    }
  }
  return -1;
};

this.remove = function(element){
  let index = this.indexOf(element);
  return this.removeAt(index);
};

this.isEmpty = function(){
  return (length == 0);
};

this.size = function(){
  return length;
};

this.getHead = function(){
  return head;
};
}

//Creating a hash table with the following methods: put, remove, get

function HashTable(){
  let table = [];

  let loseloseHashCode = function(key){
    let hash = 0;
    for(let i=0; i<key.length; i++){
      hash += key.charCodeAt(i);
    }
    return hash % 37;
  };

  this.put = function(key, value){
    let position = loseloseHashCode(key);
    console.log(position + ' - ' + key);
    table[position] = value;
  };

  this.get = function(key){
    return table[loseloseHashCode(key)];
  };

  this.remove = function(key){
    table[loseloseHashCode(key)] = undefined;
  };

  this.print = function(){
    for(let i=0; i<table.length; i++){
      if(table[i] !== undefined){
        console.log(i + ': ' + table[i]);
      }
    }
  };

}

//Create a HashTable class

let hash = new HashTable();

hash.put('apple','red');
hash.put('banana','yellow');
hash.put('kiwi','green');
console.log(hash.get('apple'));
hash.print();

//Create a Separate chaining hash table
function HashTableLL(){
  table = [];
  let loseloseHashCode = function(key){
    let hash = 0;
    for(let i=0; i<key.length; i++){
      hash += key.charCodeAt(i);
    }
    return hash % 37;
  };

  let ValuePair = function(key, value){
    this.key = key;
    this.value = value;
    this.toString = function(){
      return '[' + this.key + '-' + this.value + ']';
    }
  };

  this.put = function(key, value){
    let position = loseloseHashCode(key);

    if(table[position] === undefined){
      table[position] = new LinkedList();
    }
    table[position].append(new ValuePair(key, value))
    console.log(position + ' - ' + key)
  };

  this.get = function(key){
    let position = loseloseHashCode(key);

    if(table[position] != undefined){
      let current = table[position].getHead();

      while(current){
        if (current.element.key === key){
          return current.element.value;
        }
        current = current.next;
      }
      return undefined;
    }
  };

  this.remove = function(key){
    let position = loseloseHashCode(key);
    if(table[position] != undefined){
      let current = table[position].getHead();
      while(current){
        if(current.element.key === key){
          table[position].remove(current.element);
          if(table[position].isEmpty()){
            table[position] = undefined;
          }
          return true;
        }
        current = current.next;
      }
    }
    return false;
  };
}
let hashTableLL = new HashTableLL();
hashTableLL.put('apple','red');
hashTableLL.put('banana','yellow');
hashTableLL.put('kiwi','green');
console.log(hashTableLL.get('kiwi'));
hashTableLL.remove('banana');
console.log(hashTableLL.get('banana'));

//Create a Linear Probing HashTable
function HashTableLP(){
  let table = [];

  let loseloseHashCode = function(key){
    let hash = 0;
    for(let i=0; i<key.length; i++){
      hash += key.charCodeAt(i);
    }
    return hash % 37;
  };

  let ValuePair = function(key, value){
    this.key = key;
    this.value = value;
    this.toString = function(){
      return '[' + this.key + '-' + this.value + ']';
    }
  };

  this.put = function(key, value){
    let position = loseloseHashCode(key);

    if(table[position] == undefined){
      table[position] = new ValuePair(key, value);
    }else{
      let index = ++position;
      while(table[index] != undefined){
        inded++;
      }
      table[index] = new ValuePair(key, value);
    }
  };

  this.get = function(key){
    let position = loseloseHashCode(key);
    if(table[position] != undefined){
      if(table[position].key === key){
        return table[position].value;
      }else{
      let index = ++position;
      while(table[index].key != key || table[index] === undefined){
        index++;
      }
      if(table[index].key === key){
        return table[index].value;
      }
    }
    }
    return undefined;
  };

  this.remove = function(key){
    let position = loseloseHashCode(key);
    if(table[position] != undefined){
      return table[position] = undefined;
    }else{
      let index = ++position;
      while(table[index].key != key || table[index].key === undefined){
        index++;
      }
      if(table[index].key === key){
        table[index] = undefined;
      }
    }
  };
}

let hashTableLP = new HashTableLP();
hashTableLP.put('apple','red');
hashTableLP.put('banana','yellow');
hashTableLP.put('kiwi','green');
console.log(hashTableLP.get('kiwi'));
hashTableLP.remove('banana');
console.log(hashTableLP.get('banana'));
