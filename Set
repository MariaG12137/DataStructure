//Create a new set with methods: add, delete, has, clear, size, values
function Set(){
  let items = {};

  this.has = function(value){
    return value in items;
  };

  this.add = function(value){
    if(!this.has(value)){
      items[value] = value;
      return true;
    }else{
      return false
    }
  };

  this.delete = function(value){
    if(this.has(value)){
      delete items[value];
      return true;
    }
    return false;
  };

  this.clear = function(){
    items = {};
  };

  this.size = function(){
    return Object.keys(items).length;
  };

  this.sizeLegacy = function(){
    let count = 0;
    for (let key in items){
      if(items.hasOwnProperty(key))
      ++count;
    }
    return count;
  };

  this.values = function(){
    let values = [];
    keys = Object.keys(items);
    for(let i=0; i<keys.length; i++){
      values.push(items[keys[i]]);
    }
    return values;
  };

  this.values2 = function(){
    let values = [];
    for(let key in items){
      if(items.hasOwnProperty(key)){
        values.push(items[key])
      }
    }
    return values;
  };
}

let set = new Set();

set.add(1);
set.add(2);
console.log(set.values()); //[1,2]
set.delete(2);
console.log(set.values2()); //[1]
console.log(set.has(1)); //true
console.log(set.size()); //1
