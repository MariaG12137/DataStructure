//Creating the BinarySearchTree class with the following methods: insert, search, inOrderTraverse, preOrderTraverse, postOrderTraverse, min, max, remove

function BinarySearchTree(){
  let Node = function(key){
    this.key = key;
    this.left = null;
    this.right = null;
  };

  let root = null;

  let insertNode = function(node, newNode){
    if(newNode.key < node.key){
      if(node.left === null){
        node.left = newNode;
      }else{
        insertNode(node.left,newNode);
        }
    }else{
      if(node.right === null){
        node.right = newNode;
      }else{
        insertNode(node.right, newNode);
      }
    }
  };

  this.insert = function(key){
    let newNode = new Node(key);
  
    if(root === null){
      root = newNode;
    }else{
       insertNode(root,newNode);
    }
  };

  this.inOrderTraverse = function(callback){
    inOrderTraverseNode(root,callback);
  };

  let inOrderTraverseNode = function(node,callback){
    if(node != null){
      inOrderTraverseNode(node.left, callback);
      callback(node.key);
      inOrderTraverseNode(node.right, callback);
    };
  }

  this.preOrderTraverse = function(callback){
    preOrderTraverseNode(root,callback);
  }

  let preOrderTraverseNode = function(node, callback){
    if(node != null){
      callback(node.key);
      preOrderTraverseNode(node.left, callback);
      preOrderTraverseNode(node.right, callback);
    }
  };

  this.postOrderTraverse = function(callback){
    postOrderTraverseNode(root, callback);
  };

  let postOrderTraverseNode = function(node, callback){
    if(node != null){
      postOrderTraverseNode(node.left,callback);
      postOrderTraverseNode(node.right, callback);
      callback(node.key);
    }
  };

  this.min = function(){
    return minNode(root);
  };

  let minNode = function(node){
    if(node){
      while(node && node.left !== null){
        node = node.left;
      }
      return node.key;
    }
    return null;
  };

  this.max = function(){
    return maxNode(root);
  };

  let maxNode = function(node){
    if(node){
      while(node && node.right !=null){
        node = node.right;
      }
      return node.key;
    }
    return null;
  };

  this.search = function(key){
    return searchNode(root, key)? 'Key found': 'key not found. ';
  };

  let searchNode = function(node, key){
    if(node === null){
      return false;
    }
    if(node.key > key){
      return searchNode(node.left, key);
    }
    if(node.key < key){
      return searchNode(node.right, key);
    }else {
      return true;
    }
  };

  this.remove = function(key){
    root = removeNode(root, key);
  }

  let removeNode = function(node, key){
    if(node === null){
      return null;
    }
    if(key < node.key){
      node.left = removeNode(node.left,key);
      return node;
    }
    if(key > node.key){
      node.right = removeNode(node.right, key);
      return node;
    } else{
      if(node.left === null && node.right === null){
        node = null;
        return node;
      }
      if(node.left != null){
        node = node.left;
        return node;
      }
      if(node.right != null){
        node = node.right;
        return node;
      } else{
        let aux = findMinNode(node.right);
        node.key = aux.key;
        node.right = removeNode(node.right, aux.key);
        return node;
      }
    }
  };

  let findMinNode = function(node){
    while(node.left != null){
      node = node.left;
    }
    return node;
  };

}

let tree = new BinarySearchTree();
let array = [7, 15, 5, 3, 9, 8, 10, 13, 12, 14, 20, 18, 25];
for(let i of array){
  tree.insert(i);
};

let print = function(element){
  console.log(element)
};

function CreateArray(element){
  let array = [];
  this.pushArray = function(element){
    array.push(element);
  }
  this.array = array;
}

let createArrayInOrder = new CreateArray();
let createArrayPreOrder = new CreateArray();
let createArrayPostOrder = new CreateArray();

tree.inOrderTraverse(createArrayInOrder.pushArray)
console.log(createArrayInOrder.array);

tree.preOrderTraverse(createArrayPreOrder.pushArray)
console.log(createArrayPreOrder.array);

tree.postOrderTraverse(createArrayPostOrder.pushArray)
console.log(createArrayPostOrder.array);

console.log(tree.max());
console.log(tree.min());
console.log(tree.search(3));
console.log(tree.search(4));
tree.remove(13);
tree.postOrderTraverse(createArrayPostOrder.pushArray)
console.log(createArrayPostOrder.array);
